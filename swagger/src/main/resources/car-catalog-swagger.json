{
  "swagger" : "2.0",
  "info" : {
    "description" : "With this api you can work with the car catalog server. In api there is a standard user who has read-only access, and there is an admin who has more functionality: delete a car, update cars, add. The api has 7 endpoints with which you can work with it. Follow the instructions of the endpoints to successfully work with the api.\n\nApi has 2 controllers for admin authorization and crud operations with car catalog.\n\nTo read cars from the catalog no authorization is needed, and to add and edit is necessary.",
    "version" : "1.0",
    "title" : "Car catalog",
    "contact" : {
      "name" : "Petro Sliusarenko",
      "email" : "petslu23@gmail.com"
    }
  },
  "host" : "cars-peter-s-spring.implemica.com",
  "basePath" : "/",
  "tags" : [ {
    "name" : "Authentication",
    "description" : "Operation with admin"
  }, {
    "name" : "Car",
    "description" : "Operations with car"
  } ],
  "paths" : {
    "/cars" : {
      "get" : {
        "tags" : [ "Car" ],
        "summary" : "Get list of Cars in the database.",
        "description" : "Use this api endpoint to get the list of cars in the database, you don't need to send any headers and you don't need to authenticate the request.",
        "operationId" : "getAllUsingGET",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Successful operation. API returns a list of cars from the database.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Car"
              }
            }
          },
          "204" : {
            "description" : "The operation is successful. But the list of cars in the database is empty."
          }
        },
        "security" : [ {
          "JWT" : [ "global" ]
        } ]
      },
      "post" : {
        "tags" : [ "Car" ],
        "summary" : "Create a Car in database.",
        "description" : "Use this api endpoint to add a car to the database. For a successful operation, you need a jwt token, which must be passed in the header using the key \"Authorization\".",
        "operationId" : "createUsingPOST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "To successfully receive a response from the api, you should send the body according to the example, follow the CarDTO validation.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CarDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Car"
            }
          },
          "201" : {
            "description" : "The operation is successful. The car has been added to the database."
          },
          "400" : {
            "description" : "Operation failed. Invalid data sent."
          },
          "401" : {
            "description" : "You did not pass the token in the header, or the token has expired, or the token is not valid."
          },
          "409" : {
            "description" : "Car with the same fields as 'brand', 'model', 'bodyType', 'year', 'transmissionType', 'engineSize' already exist."
          }
        },
        "security" : [ {
          "JWT" : [ "global" ]
        } ]
      }
    },
    "/cars/{id}" : {
      "get" : {
        "tags" : [ "Car" ],
        "summary" : "Get Car by identifier in the database.",
        "description" : "Use this api endpoint to get the car by identifier in the database, you don't need to send any headers and you don't need to authenticate the request.Also send the model following validation in json format.",
        "operationId" : "getUsingGET",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the car by which the car will be returned.",
          "required" : true,
          "type" : "integer",
          "format" : "int64",
          "x-example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation. API return car by identifier from the database.",
            "schema" : {
              "$ref" : "#/definitions/Car"
            }
          },
          "404" : {
            "description" : "Failed operation. Car by identifier not found."
          }
        },
        "security" : [ {
          "JWT" : [ "global" ]
        } ]
      },
      "put" : {
        "tags" : [ "Car" ],
        "summary" : "Update Car by identifier in the database.",
        "description" : "Use this api endpoint to update a car by identifier in the database. For a successful operation, you need a jwt token, which must be passed in the header using the key \"Authorization\". Also send the model following validation in json format.",
        "operationId" : "updateUsingPUT",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "To successfully receive a response from the api, you should send the body according to the example, follow the CarDTO validation.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CarDTO"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the car by which the car will be updated.",
          "required" : true,
          "type" : "integer",
          "format" : "int64",
          "x-example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation. Car by identifier updated.",
            "schema" : {
              "$ref" : "#/definitions/Car"
            }
          },
          "400" : {
            "description" : "Operation failed. Invalid data sent."
          },
          "401" : {
            "description" : "You did not pass the token in the header, or the token has expired, or the token is not valid."
          },
          "404" : {
            "description" : "Failed operation. Car by identifier not found."
          },
          "409" : {
            "description" : "Car with the same fields as 'brand', 'model', 'bodyType', 'year', 'transmissionType', 'engineSize' already exist."
          }
        },
        "security" : [ {
          "JWT" : [ "global" ]
        } ]
      },
      "delete" : {
        "tags" : [ "Car" ],
        "summary" : "Delete Car by identifier in the database.",
        "description" : "Use this api endpoint to delete a car by identifier from the database. For a successful operation, you need a jwt token, which must be passed in the header using the key \"Authorization\".",
        "operationId" : "deleteUsingDELETE",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the car by which the car will be delete.",
          "required" : true,
          "type" : "integer",
          "format" : "int64",
          "x-example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation. Car by identifier has been removed from the database."
          },
          "401" : {
            "description" : "You did not pass the token in the header, or the token has expired, or the token is not valid."
          },
          "404" : {
            "description" : "Failed operation. Car by identifier not found."
          }
        },
        "security" : [ {
          "JWT" : [ "global" ]
        } ]
      }
    },
    "/cars/{id}/uploadImage" : {
      "post" : {
        "tags" : [ "Car" ],
        "summary" : "Upload car image by car identifier in database.",
        "description" : "Use this API endpoint to upload the car image by identifier. For a successful operation, a jwt token is required, which must be passed in the header using the \"Authorization\" key.",
        "operationId" : "uploadImageUsingPOST",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "image",
          "in" : "formData",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the car, by which the image will be uploaded.",
          "required" : true,
          "type" : "integer",
          "format" : "int64",
          "x-example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation. The image of the car by identifier has been changed."
          },
          "401" : {
            "description" : "You did not pass the token in the header, or the token has expired, or the token is not valid."
          },
          "404" : {
            "description" : "Failed operation. Car by identifier not found."
          }
        },
        "security" : [ {
          "JWT" : [ "global" ]
        } ]
      }
    },
    "/login" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Logs admin into the system.",
        "description" : "Use this API login endpoint to access admin functionality.car table To log in, you need an email and password for this, in json format,car table as shown in the example. If the data is correct,car table the server will answer you with a 200 code and in the body of the response car tableyou will receive a jwt token that is needed to authenticate requests for adding, deleting and updating.",
        "operationId" : "authenticateUsingPOST",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "In order to successfully receive a response from the api,car table you should send the body following the example with the login email and the correct password.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AuthenticationRequestDTO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation.. You have received a token to authenticate admin operations",
            "schema" : {
              "$ref" : "#/definitions/AuthorizationResponse"
            }
          },
          "400" : {
            "description" : "Operation failed. You probably entered an invalid password or email."
          },
          "403" : {
            "description" : "Operation failed. You probably entered an unregistered email or incorrect password."
          }
        },
        "security" : [ {
          "JWT" : [ "global" ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "JWT" : {
      "type" : "apiKey",
      "name" : "Authorization",
      "in" : "header"
    }
  },
  "definitions" : {
    "AuthenticationRequestDTO" : {
      "type" : "object",
      "required" : [ "password", "username" ],
      "properties" : {
        "password" : {
          "type" : "string",
          "example" : "password",
          "description" : "Admin password.",
          "minLength" : 4,
          "maxLength" : 20
        },
        "username" : {
          "type" : "string",
          "example" : "admin",
          "description" : "Admin email address.",
          "minLength" : 4,
          "maxLength" : 20,
          "pattern" : "^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9])*$"
        }
      },
      "title" : "AuthenticationRequestDTO",
      "description" : "Used to pass admin authorization data."
    },
    "AuthorizationResponse" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string",
          "example" : "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkBhZG1pbi5jb20iLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2NzAzMjAwNDMsImV4cCI6MTY3MDMyMzY0M30.AriLxRSb1htNjTZLCeZ5eKx_O8RANtaVeL1ust7EUXY",
          "description" : "JWT token to confirm authorization on the endpoint."
        },
        "username" : {
          "type" : "string",
          "example" : "admin",
          "description" : "Email address admin who logged in."
        }
      },
      "title" : "AuthorizationResponse",
      "description" : "Used to return a jwt token upon successful admin authorization."
    },
    "Car" : {
      "type" : "object",
      "required" : [ "bodyType", "brand", "model", "transmissionType" ],
      "properties" : {
        "bodyType" : {
          "type" : "string",
          "example" : "COUPE",
          "enum" : [ "CONVERTIBLE", "COUPE", "HATCHBACK", "JEEP", "MUV", "SEDAN", "SPORTCAR", "SUV", "VAN", "WAGON" ]
        },
        "brand" : {
          "type" : "string",
          "example" : "PORSCHE",
          "enum" : [ "ACURA", "ALFA", "ASTON_MARTIN", "AUDI", "BENTLEY", "BMW", "BRILLIANCE", "BUGATTI", "BUICK", "BYD", "CADILLAC", "CHANGAN", "CHERY", "CHEVROLET", "CHRYSLER", "CITROEN", "DACIA", "DAEWOO", "DAIHATSU", "DATSUN", "DODGE", "FAW", "FERRARI", "FIAT", "FORD", "GEELY", "GENESIS", "GMC", "GREAT_WALL", "HONDA", "HUMMER", "HYUNDAI", "INFINITI", "JAGUAR", "JEEP", "KIA", "LAMBORGHINI", "LANCIA", "LAND_ROVER", "LEXUS", "LIFAN", "LINCOLN", "LOTUS", "MARUSSIA", "MASERATI", "MAYBACH", "MAZDA", "MCLAREN", "MERCEDES", "MINI", "MITSUBISHI", "NISSAN", "OPEL", "PEUGEOT", "PONTIAC", "PORSCHE", "RENAULT", "ROLLS_ROYCE", "ROMEO", "SAAB", "SANGYONG", "SEAT", "SKODA", "SMART", "SUBARU", "SUZUKI", "TAGAZ", "TESLA", "TOYOTA", "VOLKSWAGEN", "VOLVO" ]
        },
        "description" : {
          "type" : "string",
          "example" : "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
        },
        "engineSize" : {
          "type" : "number",
          "format" : "double",
          "example" : 4.4,
          "description" : "When engine is 0, it mean car is electric"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Unique vehicle id in the database."
        },
        "imageName" : {
          "type" : "string",
          "example" : "defaultImageCar.png",
          "description" : "Image name for car. Download a image, you need to follow the link <link Amazon Web Service S3 bucket\\ + imageName>."
        },
        "model" : {
          "type" : "string",
          "example" : 911
        },
        "optionsList" : {
          "type" : "array",
          "example" : [ "Any first option", "Any second option" ],
          "items" : {
            "type" : "string"
          }
        },
        "shortDescription" : {
          "type" : "string",
          "example" : "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
        },
        "transmissionType" : {
          "type" : "string",
          "example" : "AUTOMATIC",
          "enum" : [ "AUTOMATIC", "MANUAL" ]
        },
        "year" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2018
        }
      },
      "title" : "Car",
      "description" : "Car entity in database."
    },
    "CarDTO" : {
      "type" : "object",
      "required" : [ "bodyType", "brand", "model", "transmissionType" ],
      "properties" : {
        "bodyType" : {
          "type" : "string",
          "example" : "COUPE",
          "enum" : [ "CONVERTIBLE", "COUPE", "HATCHBACK", "JEEP", "MUV", "SEDAN", "SPORTCAR", "SUV", "VAN", "WAGON" ]
        },
        "brand" : {
          "type" : "string",
          "example" : "PORSCHE",
          "enum" : [ "ACURA", "ALFA", "ASTON_MARTIN", "AUDI", "BENTLEY", "BMW", "BRILLIANCE", "BUGATTI", "BUICK", "BYD", "CADILLAC", "CHANGAN", "CHERY", "CHEVROLET", "CHRYSLER", "CITROEN", "DACIA", "DAEWOO", "DAIHATSU", "DATSUN", "DODGE", "FAW", "FERRARI", "FIAT", "FORD", "GEELY", "GENESIS", "GMC", "GREAT_WALL", "HONDA", "HUMMER", "HYUNDAI", "INFINITI", "JAGUAR", "JEEP", "KIA", "LAMBORGHINI", "LANCIA", "LAND_ROVER", "LEXUS", "LIFAN", "LINCOLN", "LOTUS", "MARUSSIA", "MASERATI", "MAYBACH", "MAZDA", "MCLAREN", "MERCEDES", "MINI", "MITSUBISHI", "NISSAN", "OPEL", "PEUGEOT", "PONTIAC", "PORSCHE", "RENAULT", "ROLLS_ROYCE", "ROMEO", "SAAB", "SANGYONG", "SEAT", "SKODA", "SMART", "SUBARU", "SUZUKI", "TAGAZ", "TESLA", "TOYOTA", "VOLKSWAGEN", "VOLVO" ]
        },
        "description" : {
          "type" : "string",
          "example" : "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
          "minLength" : 50,
          "maxLength" : 5000
        },
        "engineSize" : {
          "type" : "number",
          "format" : "double",
          "example" : 4.4,
          "description" : "When engine is 0, it mean car is electric.",
          "minimum" : 0,
          "maximum" : 10.0,
          "exclusiveMinimum" : false,
          "exclusiveMaximum" : false
        },
        "model" : {
          "type" : "string",
          "example" : "Cayenne",
          "minLength" : 2,
          "maxLength" : 40,
          "pattern" : "[a-zA-Z0-9-\\s]*"
        },
        "optionsList" : {
          "type" : "array",
          "example" : [ "Any first option", "Any second option" ],
          "items" : {
            "type" : "string"
          }
        },
        "shortDescription" : {
          "type" : "string",
          "example" : "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
          "minLength" : 25,
          "maxLength" : 150
        },
        "transmissionType" : {
          "type" : "string",
          "example" : "AUTOMATIC",
          "enum" : [ "AUTOMATIC", "MANUAL" ]
        },
        "year" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2018,
          "minimum" : 1880,
          "maximum" : 2100,
          "exclusiveMinimum" : false,
          "exclusiveMaximum" : false
        }
      },
      "title" : "CarDTO",
      "description" : "Car data transfer object used to transfer vehicle data to a server."
    }
  }
}